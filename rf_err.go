package rf

import "strings"

// All errors generated by this package have this type.
type Err struct {
	While string
	Cause error
}

// Implement the `error` interface.
func (self Err) Error() string { return self.format(``) }

// Implement a hidden interface in "errors".
func (self Err) Unwrap() error { return self.Cause }

func (self Err) format(typ string) string {
	var buf strings.Builder
	buf.Grow(128)
	buf.WriteString(`[rf] error`)

	if typ != `` {
		buf.WriteString(` "`)
		buf.WriteString(typ)
		buf.WriteString(`"`)
	}

	if self.While != `` {
		buf.WriteString(` while `)
		buf.WriteString(self.While)
	}

	if self.Cause != nil {
		buf.WriteString(`: `)
		buf.WriteString(self.Cause.Error())
	}

	return buf.String()
}
